datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String  @id
  name          String?
  email         String
  emailVerified Boolean
  utmTracking   Json?

  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  conversations Conversation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model AIGirlfriend {
  id                String   @id @default(cuid())
  pseudo            String   @unique
  slug              String   @unique
  profileImageId    String
  isActive          Boolean  @default(true)
  hook              String?
  chatOpeningLine   Json?
  traits            String[] @default([])
  archetype         String?
  voice             String?
  boundaries        String[] @default([])
  styleReminders    String[] @default([])
  petNames          String[] @default([])
  emojiRatio        Float    @default(0.1)
  sentenceLength    String?  @default("short")
  aftercare         Boolean  @default(true)
  consentChecks     String[] @default([])
  genTemperature    Float    @default(0.9)
  genTopP           Float    @default(0.9)
  genMaxTokens      Int      @default(220)
  visualStylePrompt String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  conversations Conversation[]

  @@index([isActive, slug])
  @@map("ai_girlfriend")
}

model Conversation {
  id             String   @id @default(cuid())
  userId         String
  aiGirlfriendId String
  isActive       Boolean  @default(true)
  lastMessageAt  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiGirlfriend AIGirlfriend @relation(fields: [aiGirlfriendId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@unique([userId, aiGirlfriendId])
  @@index([userId])
  @@index([aiGirlfriendId])
  @@index([lastMessageAt])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  sender         MessageSender
  content        String
  isRead         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

enum MessageSender {
  USER
  AI
}
